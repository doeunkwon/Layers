const request = require('supertest');
const app = require('your-express-app'); // Replace 'your-express-app' with the actual app initialization

describe('POST /users', () => {
  it('should create a new user', async () => {
    const newUser = {
      uid: 'f47ac10b-58cc-4372-a567-0e02b2c3d479',
      first_name: 'John',
      last_name: 'Doe',
      user_name: 'johndoe',
      email: 'johndoe@example.com',
      password: 'password',
      profile_picture: 'profile-picture-url',
      followings: [],
      followers: []
    };

    const response = await request(app)
      .post('/users')
      .send(newUser);

    expect(response.status).toBe(200);
    expect(response.body).toEqual({ message: 'User created' });
  });

  it('should return 500 error if there is an internal server error', async () => {
    // Mock an error in the database operation
    jest.spyOn(conn, 'query').mockImplementation(() => {
      throw new Error('Database error');
    });

    const newUser = {
      // Provide the necessary user data
    };

    const response = await request(app)
      .post('/users')
      .send(newUser);

    expect(response.status).toBe(500);
    expect(response.body).toEqual({ error: 'Internal server error' });
  });
});
